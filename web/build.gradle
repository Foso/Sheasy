buildscript {
    apply from: './webConstants.gradle'
}
plugins {

    id 'org.jetbrains.kotlin.multiplatform'
    id 'org.jetbrains.kotlin.frontend'
    id("io.gitlab.arturbosch.detekt")
    id('com.moowork.node')

}


repositories {
    ext.buildMaven = { p -> repositories { maven { url p } } }
    jcenter()
    mavenCentral()
    mavenRepos.each { buildMaven(it) }

}
detekt {
    toolVersion = "1.0.0.RC9.2"
    input = files("src/jsMain/kotlin")
    filters = ".*/resources/.*,.*/build/.*"
    config = files("./default-detekt-config.yml")
}
kotlin {


        jvm() {
            configure([compilations.main]) {
                tasks.getByName(compileKotlinTaskName).kotlinOptions {
                    jvmTarget = "1.8"
                }
            }
        }
        js() {
            configure([compilations.main]) {
                tasks.getByName(compileKotlinTaskName).kotlinOptions {
                    languageVersion = "1.3"
                    sourceMap = true
                    moduleKind = "commonjs"
                    metaInfo = true
                    outputFile = "${project.buildDir.path}/js/${project.name}.js"
                }
            }



            configure(compilations.main) {
                tasks.getByName(compileKotlinTaskName).kotlinOptions {
                    main = "call"
                }
            }
        }


    sourceSets {

        commonMain {
            dependencies {

                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation "io.ktor:ktor-html-builder:$libs.ktor_version"
            }

        }

        jsMain {
            kotlin.srcDirs += "kotlin"
            resources.srcDirs += "web"

            dependencies {

                implementation "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-html-js:$kotlinx_html_version"
                implementation "org.jetbrains:kotlin-react:$kotlin_react_version"
                implementation "org.jetbrains:kotlin-react-dom:$kotlin_react_dom_version"
                implementation "org.kodein.di:kodein-di-erased-js:$libs.kodein"
                implementation "org.jetbrains.kotlin:kotlin-test-js"
            }
        }



        jvmMain {
            kotlin.srcDirs += "kotlin"

            resources.srcDirs += "resources"
            dependencies {


                implementation "org.mockito:mockito-core:2.22.0"
                implementation "io.mockk:mockk:1.9"

                //implementation "org.spekframework.spek2:spek-dsl-jvm:2.0.0-rc.1"
                //runtimeOnly "org.spekframework.spek2:spek-runner-junit5:2.0.0-rc.1"
            }
        }

    }
}
kotlinFrontend {
    downloadNodeJsVersion = 'latest'

    npm {
        dependency("bootstrap", "${libs.bootstrap}")
        dependency("@material-ui/core", "v3.7.0")
        dependency("@material-ui/icons")
        dependency("axios", "${libs.axios}")
        dependency("react-autosuggest")
        dependency("history", "${libs.history}")
        dependency("react-router-dom", "${libs.react_router_dom}")
        dependency("react-dev-utils", "^5.0.2")
        dependency("react-draggable", "${libs.react_draggable}")
        dependency("react-dropzone", "${libs.react_dropzone}")
        dependency("react-web-notification", "${libs.react_web_notification}")
        dependency("reactstrap", "${libs.reactstrap}")
        dependency("simple-websocket", "${libs.simple_websocket}")
        dependency('react', react_version)
        dependency('react-dom', react_version)
        dependency("css-loader")
        dependency("style-loader")
        dependency("jest")
        dependency("rxjs", "6.3.3")

    }


    webpackBundle {
        port = 8080
        // mode= "production"
        bundleName = "jsMain"
        sourceMapEnabled = true
        contentPath = file('src/jsMain/web')
        publicPath = "/web"
        //  proxyUrl = 'http://localhost:8080'
    }
}
task serverPrepare(type: Copy, dependsOn: ["build"]) {
    from "./build/bundle", "./src/jsMain/web"
    into "./deploy"
}
task stopTomcat(type: Exec) {
//    workingDir '../tomcat/bin'

    //on linux
    //  commandLine 'cd ${project.buildDir.path}'
    commandLine 'cd ..'
    commandLine 'pwd'

    // commandLine './gradlew -t webpack-run'


}