buildscript {
    apply from: './webConstants.gradle'

    repositories {
        mavenLocal()
        google()
        jcenter()
        mavenCentral()
        mavenRepos.each { buildMaven(it) }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-frontend-plugin:0.0.45"
    }

}
plugins {
    id 'org.jetbrains.kotlin.multiplatform'
    id("io.gitlab.arturbosch.detekt")
    id('com.moowork.node')
    id("kotlin-dce-js")

}

apply plugin: 'org.jetbrains.kotlin.frontend'
repositories {
    ext.buildMaven = { p -> repositories { maven { url p } } }
    jcenter()
    mavenCentral()
    mavenRepos.each { buildMaven(it) }

}
detekt {
    toolVersion = "$libs.detektVersion"
    input = files("src/jsMain/kotlin")
    filters = ".*/resources/.*,.*/build/.*"
    config = files("./default-detekt-config.yml")
}
kotlin {

    js() {
        configure([compilations.main]) {
            tasks.getByName(compileKotlinTaskName).kotlinOptions {
                languageVersion = "1.3"
                sourceMap = true

                moduleKind = "commonjs"
                metaInfo = true
                outputFile = "${project.buildDir.path}/js/${project.name}.js"
            }
        }


        configure(compilations.main) {
            tasks.getByName(compileKotlinTaskName).kotlinOptions {
                main = "call"
            }
        }
    }


    sourceSets {

        commonMain {
            dependencies {

                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                compileOnly project(":libshared")

            }

        }

        jsMain {
            kotlin.srcDirs += "kotlin"
            resources.srcDirs += "web"

            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js:$configuration.kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-html-js:$libs.kotlinx_html_version"
                implementation "org.jetbrains:kotlin-react:$libs.kotlin_react_version"
                implementation "org.jetbrains:kotlin-react-dom:$libs.kotlin_react_dom_version"
                implementation "org.jetbrains.kotlin:kotlin-test-js"
                implementation "br.danfma.kodando:kodando-rxjs:$libs.kodando_rxjs"
                implementation "com.noheltcj:rx-common-js:$libs.rx_common_js"
                implementation(npm("@material-ui/core", libs.material_ui_core))

            }
        }
    }
}
kotlinFrontend {
    downloadNodeJsVersion = 'latest'

    npm {
        dependency("@material-ui/core", libs.material_ui_core)
        dependency("@material-ui/icons")
        dependency("axios", "${libs.axios}")
        dependency("bootstrap", "${libs.bootstrap}")
        dependency("react-router-dom", "${libs.react_router_dom}")
        dependency("react-draggable", "${libs.react_draggable}")
        dependency("react-dropzone", "${libs.react_dropzone}")
        dependency("react-web-notification", "${libs.react_web_notification}")
        dependency('react', libs.react_version)
        dependency('react-dom', libs.react_version)
        dependency("css-loader")
        dependency("reactstrap", "${libs.reactstrap}")
        dependency("react-dev-utils", "^5.0.2")
        dependency("rxjs", Versions.web.rxJS)

        dependency("style-loader")
        dependency("jest")
    }


    webpackBundle {
        port = 8080
        // mode= "production"
        bundleName = "jsMain"
        sourceMapEnabled = true
        contentPath = file('src/jsMain/web')
        publicPath = "/web"
        //  proxyUrl = 'http://localhost:8080'
    }
}
task serverPrepare(type: Copy, dependsOn: ["build"]) {
    from "./build/bundle", "./src/jsMain/web"
    into "./deploy"
}

def appProject = project(':app')

task deployToAppAssets(type: Copy, dependsOn: ["build"]) {
    from "./build/bundle", "./src/jsMain/web"
    into "${appProject.projectDir}/src/main/assets/web"
}


// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

