buildscript {
    apply from: './constants.gradle'


}

plugins {
    id("com.android.application")
    id 'org.jetbrains.kotlin.multiplatform'
    id("kotlin-kapt")

    id("kotlin-android-extensions")
    id("base")

    id("changelog")
    id("androidx.navigation.safeargs")


}


android {
    sourceSets {
        main.java.srcDirs += 'src/main/java'
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'

        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/io.netty.versions.properties'

    }
    compileSdkVersion configuration.compileSdk
    defaultConfig {
        buildConfigField "int", "SERVER_PORT", configuration.serverPort
        buildConfigField "int", "WEBSOCKET_PORT", configuration.websocketPort
        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
        buildConfigField "String", "APP_VERSION", "\"${configuration.appVersion}\""


        applicationId configuration.applicationId
        minSdkVersion configuration.minSdk
        targetSdkVersion configuration.targetSdk
        versionCode 1
        versionName configuration.appVersion
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8

    }
    androidExtensions {
        experimental = true
    }

    flavorDimensions 'buildType'


    productFlavors {
        mock {
            dimension 'buildType'
            applicationIdSuffix = ".mock"
        }
        prod {
            dimension 'buildType'
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}


repositories {
    jcenter()
    mavenCentral()
    mavenRepos.each { buildMaven(it) }
}


kotlin {
    targets.fromPreset(presets.android, 'main') {}


    targets.fromPreset(presets.jvm, 'jvm') {
        configure([compilations.main]) {
            tasks.getByName(compileKotlinTaskName).kotlinOptions {
                jvmTarget = "1.8"

            }


        }
    }

}

configurations {
}

dependencies {
    implementation project(":libshared")

    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //  compile "org.jetbrains.kotlin:kotlin-stdlib"
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.3.0'
    //AndroidX
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation 'androidx.lifecycle:lifecycle-reactivestreams:2.0.0'
    implementation "androidx.core:core-ktx:$libs.ktx"
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation "androidx.appcompat:appcompat:$libs.androidX.general"
    implementation "androidx.recyclerview:recyclerview:${libs.androidX.general}"
    implementation "androidx.annotation:annotation:${libs.androidX.general}"
    implementation "androidx.constraintlayout:constraintlayout:${libs.androidX.constraintLayout}"
    implementation 'com.shopify:livedata-ktx:2.0.1'

    //Moshi
    implementation "com.serjltt.moshi:moshi-lazy-adapters:${libs.moshilazyadapters}"
    implementation "com.squareup.moshi:moshi-kotlin:${libs.moshikotlin}"

    //Ktor
    implementation "io.ktor:ktor-server-netty:$libs.ktor_version"

    implementation "io.ktor:ktor-websockets:$libs.ktor_version"
    implementation "io.ktor:ktor:$libs.ktor_version"
    implementation "io.ktor:ktor-network-tls:$libs.ktor_version"
    implementation "io.ktor:ktor-gson:$libs.ktor_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-rx2:1.0.1'


    //NanoHTTPD
    implementation "org.nanohttpd:nanohttpd-websocket:$libs.nanohttpdwebsocket"
    implementation 'org.nanohttpd:nanohttpd:2.3.1'
    //RxJava
    implementation "io.reactivex.rxjava2:rxandroid:${libs.rxandroid}"
    implementation "io.reactivex.rxjava2:rxjava:${libs.rxJava}"
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.1.1'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.3.0'

    //Dagger
    implementation "com.google.dagger:dagger-android:${libs.dagger}"
    implementation "com.google.dagger:dagger-android-support:${libs.dagger}"

    // if you use the support libraries
    kapt "com.google.dagger:dagger-compiler:${libs.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${libs.dagger}"

    //Other
    implementation("com.mikepenz:aboutlibraries:${libs.aboutlibraries}") {
        transitive = true
    }
    implementation "com.jakewharton.threetenabp:threetenabp:$libs.threetenabp"
    implementation 'co.zsmb:materialdrawer-kt:2.0.1'

    //implementation 'com.google.android.material:material:1.0.0-alpha1'
    implementation 'com.google.android.material:material:1.0.0'

    //NavigationLib
    implementation "android.arch.navigation:navigation-fragment-ktx:$libs.androidX.nav_version"
    implementation "android.arch.navigation:navigation-ui-ktx:$libs.nav_version"

    // optional - Test helpers

    // this library depends on the Kotlin standard library

    //Testing
    testImplementation 'org.json:json:20140107'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: "$libs.mockitoVersion"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    testImplementation 'com.nhaarman:mockito-kotlin:1.5.0'
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${configuration.kotlin_version}"
    androidTestImplementation 'androidx.test:runner:1.1.0-beta02'
    testImplementation "junit:junit:${libs.junit}"
    androidTestImplementation "android.arch.navigation:navigation-testing:$libs.nav_version"

}



task copyFiles(type: Copy) {
    from '../documentation/API/1'
    into '../documentation/API/2'
}


