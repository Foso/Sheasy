buildscript {
    apply from: './constants.gradle'
}

plugins {
    id("com.android.application")
    id 'org.jetbrains.kotlin.multiplatform'
    id("kotlin-kapt")
    id("kotlin-android-extensions")
    id("base")
    id("changelog")
    id("io.gitlab.arturbosch.detekt")
    id 'org.jetbrains.dokka'
    id 'androidx.navigation.safeargs.kotlin'

}

android {
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/kotlinx-io.kotlin_module'
        exclude 'META-INF/atomicfu.kotlin_module'
        exclude 'META-INF/kotlinx-coroutines-io.kotlin_module'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/io.netty.versions.properties'
        exclude 'META-INF/kotlinx-coroutines-core.kotlin_module'

    }
    compileSdkVersion configuration.compileSdk
    defaultConfig {
        def bitriseBuildNumber = System.getenv("BITRISE_BUILD_NUMBER")
        versionCode bitriseBuildNumber ? bitriseBuildNumber.toInteger() : 1

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
        buildConfigField "String", "APP_VERSION", "\"${configuration.appVersion}\""
        applicationId configuration.applicationId
        minSdkVersion configuration.minSdk
        targetSdkVersion configuration.targetSdk
        versionName configuration.appVersion
        testInstrumentationRunner "de.jensklingenberg.sheasy.UiTestsRunner"

        multiDexEnabled true
        signingConfig signingConfigs.debug
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["resourcePackageName": android.defaultConfig.applicationId]
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
            testProguardFile 'tests-proguard.cfg'
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8

    }
    androidExtensions {
        experimental = true
    }
    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
    signingConfigs {
        debug {
            storeFile file("../keystore/debug-keystore.jks")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }
    productFlavors {
    }
    lintOptions {
        abortOnError false
    }
}


detekt {
    toolVersion = "1.0.0.RC9.2"
    input = files("src/main/java")
    filters = ".*/resources/.*,.*/build/.*"
    config = files("./default-detekt-config.yml")
    reports {
        xml {
            enabled = true
            destination = file("$projectDir/output.xml")
        }
        html {
            enabled = true
            destination = file("$projectDir/output.xml")
        }
    }
}


kotlin {
    targets {
        fromPreset(presets.android, 'main') {}
        fromPreset(presets.jvm, 'jvm') {
            configure([compilations.main]) {
                tasks.getByName(compileKotlinTaskName).kotlinOptions {
                    jvmTarget = "1.8"
                }
            }
        }
    }
}

dokka {
    moduleName = 'app'
    outputFormat = 'html'
    outputDirectory = "./javadoc"

    linkMapping {
        dir = "src/main/java"
        url = "https://github.com/JetBrains/kotlin-examples/tree/master/gradle/dokka-gradle-example/src/main/kotlin"
        suffix = "#L"
    }
}


task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = "$projectDir/dokkaJavadoc"
}

dependencies {
    implementation project(':serverJvm')
    implementation project(":libshared")

    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //   debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-alpha-1'
    //AndroidX
    implementation "androidx.annotation:annotation:$libs.androidX.annotation"
    implementation "androidx.appcompat:appcompat:$libs.androidX.appcompat"
    implementation "androidx.cardview:cardview:$libs.androidX.cardview"
    implementation "androidx.constraintlayout:constraintlayout:${libs.androidX.constraintLayout}"
    implementation "androidx.core:core-ktx:$libs.androidX.ktx"
    implementation "androidx.fragment:fragment-ktx:$libs.androidX.fragment"
    implementation "androidx.recyclerview:recyclerview:${libs.androidX.general}"
    implementation 'com.google.android.material:material:1.0.0'

    //NavigationLib
    implementation "androidx.navigation:navigation-fragment-ktx:$libs.androidX.nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$libs.androidX.nav_version"

    //Moshi
    implementation "com.serjltt.moshi:moshi-lazy-adapters:${libs.moshilazyadapters}"
    implementation "com.squareup.moshi:moshi-kotlin:${libs.moshikotlin}"

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-rx2:1.0.1'

    implementation "io.ktor:ktor-websockets:$libs.ktor_version"


    //RxJava
    implementation Libs.android.rxAndroid
    implementation Libs.android.rxjava


    implementation "io.reactivex.rxjava2:rxkotlin:${libs.rxkotlin}"
    implementation 'com.jakewharton.rxbinding3:rxbinding:3.0.0-alpha1'
    implementation 'com.jakewharton.rxbinding3:rxbinding-core:3.0.0-alpha2'
    implementation 'com.jakewharton.rxbinding3:rxbinding-appcompat:3.0.0-alpha2'

    //Dagger
    implementation Libs.android.dagger
    implementation "com.google.dagger:dagger-android-support:${libs.dagger}"

    // if you use the support libraries
    kapt "com.google.dagger:dagger-compiler:${libs.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${libs.dagger}"
    kaptAndroidTest "com.google.dagger:dagger-compiler:${libs.dagger}"
    kaptAndroidTest "com.google.dagger:dagger-android-processor:${libs.dagger}"

    //Othermaterialdrawer
    implementation("com.mikepenz:aboutlibraries:${libs.aboutlibraries}") {
        transitive = true
    }
    implementation 'co.zsmb:materialdrawer-kt:2.0.1'
    implementation "com.squareup.retrofit2:converter-moshi:${libs.moshiConverterVersion}"


    //Retrofit
    implementation "com.squareup.retrofit2:adapter-rxjava2:${libs.retrofit}"
    implementation "com.squareup.retrofit2:retrofit:${libs.retrofit}"


    //Testing
    testImplementation group: 'org.mockito', name: 'mockito-core', version: "$libs.mockitoVersion"

    // testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${configuration.kotlin_version}"

    androidTestImplementation "io.mockk:mockk-android:${libs.mockkVersion}"


    // Core library
    androidTestImplementation 'androidx.test:core:1.2.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'

    // Assertions
    androidTestImplementation 'androidx.test.ext:truth:1.2.0'

    // Espresso dependencies
    androidTestImplementation "androidx.test.espresso:espresso-core:${libs.espressocore}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${libs.espressocore}"
    androidTestImplementation "androidx.test.espresso:espresso-intents:${libs.espressocore}"
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:${libs.espressocore}"
    androidTestImplementation "androidx.test.espresso:espresso-web:${libs.espressocore}"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:${libs.espressocore}"

    // The following Espresso dependency can be either "implementation"

    // or "androidTestImplementation", depending on whether you want the

    // dependency to appear on your APK's compile classpath or the test APK

    // classpath.
    androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:3.2.0'

    implementation 'me.toptas.fancyshowcase:fancyshowcaseview:1.1.5'
}


task copyFiles(type: Copy) {
    from '../documentation/API/1'
    into '../documentation/API/2'
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}


kapt {
    includeCompileClasspath = true
}
