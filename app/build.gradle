apply from: '../constants.gradle'

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

apply plugin: 'org.hidetake.swagger.generator'
apply plugin: 'base'



android {
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'

        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/io.netty.versions.properties'

    }
    compileSdkVersion configuration.compileSdk
    defaultConfig {
        buildConfigField "int", "SERVER_PORT", "8766"
        buildConfigField "int", "WEBSOCKET_PORT", "8765"

        applicationId configuration.applicationId
        minSdkVersion configuration.minSdk
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8

    }
    androidExtensions {
        experimental = true
    }
}


repositories {

    jcenter()
    mavenCentral()

    maven { url "https://dl.bintray.com/kotlin/ktor" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }

}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$configuration.kotlin_version"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation "junit:junit:${libs.junit}"
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${libs.espressocore}"
    swaggerCodegen 'io.swagger:swagger-codegen-cli:2.3.1'
    implementation "io.ktor:ktor:$libs.ktor_version"
    implementation "io.ktor:ktor-server-netty:$libs.ktor_version"
    implementation "io.ktor:ktor-websockets:$libs.ktor_version"
    //implementation "io.ktor:ktor-locations:$libs.ktor_version"
    implementation 'org.nanohttpd:nanohttpd:2.3.1'
    implementation 'org.nanohttpd:nanohttpd-websocket:2.3.1'
    implementation "com.squareup.moshi:moshi-kotlin:${libs.moshikotlin}"
    implementation "io.reactivex.rxjava2:rxandroid:${libs.rxandroid}"
    implementation "io.reactivex.rxjava2:rxjava:${libs.rxJava}"
    implementation "com.squareup.retrofit2:retrofit:${libs.retrofitVersion}"
    implementation "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:${rxjava2Adapter}"
    implementation "com.squareup.retrofit2:converter-moshi:${moshiConverterVersion}"
    implementation "com.serjltt.moshi:moshi-lazy-adapters:${moshilazyadapters}"
    implementation "androidx.core:core-ktx:${libs.ktx}"
    implementation "com.android.support:recyclerview-v7:${libs.supportLibVersion}"
    implementation "com.android.support:support-annotations:${libs.supportLibVersion}"
    implementation "com.android.support:cardview-v7:${libs.supportLibVersion}"
    implementation "com.android.support:appcompat-v7:${libs.supportLibVersion}"
    implementation "android.arch.lifecycle:extensions:${lifeCycleExtension}"
    implementation "android.arch.lifecycle:reactivestreams:${lifeCycleExtension}"
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.1.1'
    implementation("com.mikepenz:aboutlibraries:${libs.aboutlibraries}") {
        transitive = true
    }
    implementation 'com.jakewharton.threetenabp:threetenabp:1.1.0'
    implementation "com.google.dagger:dagger-android:${libs.dagger_version}"
    implementation "com.google.dagger:dagger-android-support:${libs.dagger_version}" // if you use the support libraries
    kapt "com.google.dagger:dagger-android-processor:${libs.dagger_version}"
    kapt "com.google.dagger:dagger-compiler:${libs.dagger_version}"
    //implementation 'com.google.android.material:material:1.0.0-alpha1'
    implementation "com.android.support:design:${libs.supportLibVersion}"
    implementation("com.mikepenz:materialdrawer:6.0.6@aar") {
        transitive = true
    }
}


swaggerSources {
    petstore {
        inputFile = file('../documentation/API/swagger-ui/swagger.yaml')
        code {
            language = 'nodejs-server'
            // configFile = file('config.json')
            outputDir = file("../documentation/API/swagger-ui/swagger-node")
        }
    }
}

task copyFiles(type: Copy) {
    from '../documentation/API/1'
    into '../documentation/API/2'
}
kotlin {
    experimental {
        coroutines "enable"
    }
}
